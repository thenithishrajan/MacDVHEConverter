#!/bin/bash

# Function to display usage instructions
show_help() {
    echo "Usage: ./dvheconverter --videos-path /path/to/mkv/files"
    exit 1
}

# Function to display a progress bar
show_progress() {
    local progress=$1
    local total=100
    local width=50  # Width of the progress bar

    local filled=$((progress * width / total))
    local empty=$((width - filled))

    local bar=$(printf "%${filled}s" | tr ' ' '#')
    local spaces=$(printf "%${empty}s")

    echo -ne "[${bar}${spaces}] ${progress}%"
}

# Parse command-line arguments
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            show_help
            ;;
        --videos-path)
            input_dir="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            ;;
    esac
done

# Check if input_dir is provided
if [ -z "$input_dir" ]; then
    echo "Error: --videos-path is required."
    show_help
fi

# Verify that the input directory exists
if [ ! -d "$input_dir" ]; then
    echo "Error: Directory '$input_dir' does not exist."
    exit 1
fi

# Collect all MKV files (case-insensitive), sorted alphabetically, into an array
files=()
while IFS= read -r file; do
    files+=("$file")
done < <(find "$input_dir" -maxdepth 1 -type f \( -iname "*.mkv" \) | sort)

total=${#files[@]}
completed=0
errors=0

# Check if no MKV files are found
if [ "$total" -eq 0 ]; then
    echo "No MKV files found in '$input_dir'"
    exit 1
fi

# Initialize statuses array
statuses=()
for ((i=0; i<total; i++)); do
    statuses+=("Pending")
done

# Create temporary and output directories
temp_dir="./temp"
output_dir="./output"
mkdir -p "$temp_dir" "$output_dir"

# Function to display the current status
display_status() {
    # Clear the screen
    printf "\033c"

    echo "========================================="
    echo "DVHEConverter - MKV to MP4 Conversion Tool"
    echo "========================================="
    echo ""
    echo "Total Files : $total"
    echo "Completed   : $completed"
    echo "Errors      : $errors"
    echo ""
    echo "File Statuses:"
    echo "--------------"
    for ((j=0; j<total; j++)); do
        filename=$(basename "${files[$j]}")
        status="${statuses[$j]}"
        printf "%2d. %-60s [%s]\n" $((j+1)) "$filename" "$status"
    done
    echo ""
}

# Initial display
display_status

# Function to process a single file
process_file() {
    local index=$1
    local input_file="${files[$index]}"
    local original_filename=$(basename "$input_file")
    local filename_no_ext="${original_filename%.*}"
    local temp_mp4="$temp_dir/${filename_no_ext}_temp.mp4"
    local final_output="$output_dir/${filename_no_ext}_completed.mp4"

    # Update status to Processing
    statuses[$index]="Processing"
    display_status

    # Step 1: Converting
    echo "Processing: '$original_filename' - Converting..."
    show_progress 0
    echo ""  # Move to next line
    ffmpeg -i "$input_file" -codec copy "$temp_mp4" -y > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo -e "\nError: Failed to convert '$original_filename' to MP4."
        statuses[$index]="Error"
        errors=$((errors + 1))
        display_status
        return
    fi
    show_progress 33
    echo ""  # Move to next line

    # Update status to Demuxing
    statuses[$index]="Demuxing"
    display_status

    # Step 2: Demuxing
    echo "Processing: '$original_filename' - Demuxing..."
    show_progress 33
    echo ""  # Move to next line
    ./mp4demuxer_mac --input-file "$temp_mp4" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo -e "\nError: Demuxing failed for '$original_filename'."
        statuses[$index]="Error"
        errors=$((errors + 1))
        rm -f "$temp_mp4"
        display_status
        return
    fi
    show_progress 66
    echo ""  # Move to next line

    # Identify audio and video files generated by demuxer
    audio_file=$(ls out_*.aac out_*.ec3 2>/dev/null | head -n 1)
    video_file=$(ls out_*.h264 out_*.h265 2>/dev/null | head -n 1)

    if [ -z "$audio_file" ] || [ -z "$video_file" ]; then
        echo -e "\nError: Audio or video files not found for '$original_filename'."
        statuses[$index]="Error"
        errors=$((errors + 1))
        rm -f "$temp_mp4" "$audio_file" "$video_file"
        display_status
        return
    fi

    # Update status to Muxing
    statuses[$index]="Muxing"
    display_status

    # Step 3: Muxing
    echo "Processing: '$original_filename' - Muxing..."
    show_progress 66
    echo ""  # Move to next line
    ./mp4muxer_mac -o "$final_output" -i "$audio_file" -i "$video_file" --dv-profile 5 --dvh1flag 1 --overwrite > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo -e "\nError: Muxing failed for '$original_filename'."
        statuses[$index]="Error"
        errors=$((errors + 1))
        rm -f "$temp_mp4" "$audio_file" "$video_file"
        display_status
        return
    fi
    show_progress 100
    echo ""  # Move to next line

    # Clean up temporary files
    rm -f "$temp_mp4" "$audio_file" "$video_file"

    # Update status to Completed
    statuses[$index]="Completed"
    completed=$((completed + 1))
    display_status
}

# Process each MKV file sequentially
i=0  # Start with first file
while [ $i -lt $total ]; do
    process_file "$i"  # Process file i
    i=$((i + 1))  # Increment to the next file
done

# Final display
if [ "$errors" -eq 0 ]; then
    echo "All files processed successfully. Check the 'output' directory for results."
else
    echo "Processing completed with $errors error(s). Check the 'output' directory and logs for details."
fi
